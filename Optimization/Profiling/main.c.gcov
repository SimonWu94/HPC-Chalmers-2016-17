        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include <time.h>
        -:    4:
        -:    5:
        1:    6:void col_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs)
        -:    7:{
     1001:    8:  for ( size_t jx=0; jx < ncs; ++jx ) {
     1000:    9:    double sum = 0.;
  1001000:   10:    for ( size_t ix=0; ix < nrs; ++ix )
  1000000:   11:      sum += matrix[ix][jx];
     1000:   12:    sums[jx] = sum;
        -:   13:  }
        1:   14:}
        -:   15:
        1:   16:void row_sums(double * sums, const double ** matrix, size_t nrs, size_t ncs)
        -:   17:{
     1001:   18:  for ( size_t ix=0; ix < nrs; ++ix ) {
     1000:   19:    double sum = 0;
  1001000:   20:    for ( size_t jx=0; jx < ncs; ++jx )
  1000000:   21:      sum += matrix[ix][jx];
     1000:   22:    sums[ix] = sum;
        -:   23:  }
        1:   24:}
        -:   25:
        -:   26:/* ----------------------------------
        -:   27:naive improvement of the column sum
        -:   28:---------------------------------- */
        -:   29:
        1:   30:void col_sums_improved(double * sums, const double ** matrix, size_t nrs, size_t ncs)
        -:   31:{
        -:   32:  
     1001:   33:  for ( size_t jx=0; jx < ncs; ++jx ) {
     1000:   34:    double sum = 0.;
     1000:   35:    double * ptr = &matrix[0][jx];
  1001000:   36:    for ( size_t ix=0; ix < nrs; ++ix )
  1000000:   37:      sum += *ptr;
     1000:   38:      ptr++;
     1000:   39:    sums[jx] = sum;
        -:   40:  }
        1:   41:}
        -:   42:
        -:   43:
        -:   44:
        1:   45:int main() {
        -:   46:  
        -:   47:    //--------------------Weird Matrix Construction------------------
        -:   48:  
        -:   49:    // matrix[n][m];
        1:   50:    int nrs =1000;
        1:   51:    int ncs =1000;
        -:   52:    
        1:   53:    double **matrix  = (double **)malloc(sizeof(double *)*nrs); //n
        -:   54:  
     1001:   55:    for(int ix=0; ix<ncs; ix++){
     1000:   56:      matrix[ix] = (double *)malloc(sizeof(double)*ncs); //m
        -:   57:      }
        -:   58:      
     1001:   59:    for (int ix=0; ix<nrs;ix++){
  1001000:   60:    for (int jx=0; jx<ncs;jx++){
        -:   61:      
        -:   62:      //--------------for testing---------------
  1000000:   63:      matrix[ix][jx] = 1.;
        -:   64:      
        -:   65:      //--------------Random entries------------
        -:   66:      //matrix[ix][jx]=(double)rand()/(double)(RAND_MAX)*5.;
        -:   67:    }
        -:   68:    }
        -:   69:  
        1:   70:  printf("Successfully constructed 1000x1000 matrix. \n");
        -:   71:  
        -:   72:  
        -:   73:  
        -:   74:  //-------------------needed variables-----------------------
        1:   75:  double row_sum[nrs];
        1:   76:  double col_sum[ncs];
        1:   77:  double col_sum_improv[ncs];
        1:   78:  double *rsms = row_sum;
        1:   79:  double *csms = col_sum;
        1:   80:  double *csms_improv = col_sum_improv;
        1:   81:  const double **mat = matrix;  //Ask about this!!!!!!!!!!!!!!!!!!!!!!!!
        -:   82:  clock_t start_row, end_row, start_column, end_column, start_col_improv, end_col_improv;
        -:   83:  double cpu_time_used_row;
        -:   84:  double cpu_time_used_column;
        -:   85:  double cpu_time_used_column_improv;
        -:   86:  
        -:   87:  //--------------------Row Sums---------------------
        1:   88:  start_row = clock();
        1:   89:  row_sums(rsms,mat, nrs, ncs);
        1:   90:  end_row = clock();
        -:   91:  
        -:   92:  
        -:   93:  //--------------------Column Sums------------------
        1:   94:  start_column = clock();
        1:   95:  col_sums(csms,mat, nrs, ncs);
        1:   96:  end_column = clock();
        -:   97:  
        -:   98:  
        -:   99:  //-------------------Column Sums Imrpoved----------
        1:  100:  start_col_improv = clock();
        1:  101:  col_sums_improved(csms_improv,mat, nrs, ncs);
        1:  102:  end_col_improv = clock();
        -:  103:
        -:  104:
        -:  105:
        -:  106:  //--------------------Output Values----------------
        -:  107:  /*for (int ix=0; ix<nrs;ix++){
        -:  108:  printf("The row sums are: %f \n",row_sum[ix]);
        -:  109:  }*/
        -:  110:  
        -:  111:  /*for (int ix=0; ix<ncs;ix++){
        -:  112:  printf("The colum sums are: %f \n",col_sum[ix]);
        -:  113:  }*/
        -:  114:  
        -:  115:  //------------Calculation of time used-------------
        1:  116:  cpu_time_used_row = ((double) (end_row- start_row)) / CLOCKS_PER_SEC;
        1:  117:  cpu_time_used_column = ((double) (end_column - start_column)) / CLOCKS_PER_SEC;
        1:  118:  cpu_time_used_column_improv = ((double) (end_col_improv- start_col_improv)) / CLOCKS_PER_SEC;
        -:  119:  
        1:  120:  printf("Row timing: %f \n", cpu_time_used_row);
        1:  121:  printf("Column timing: %f \n", cpu_time_used_column);
        1:  122:  printf("Improved Column timing: %f \n", cpu_time_used_column_improv);
        -:  123:  
        -:  124:  
        1:  125:  free(matrix);
        1:  126:  return 0;
        -:  127:}
